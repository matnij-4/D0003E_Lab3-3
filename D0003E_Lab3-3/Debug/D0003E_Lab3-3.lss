
D0003E_Lab3-3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000006ca  0000075e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  0080011a  0080011a  00000778  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001299  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b12  00000000  00000000  00001b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d8  00000000  00000000  00002643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c9  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d7  00000000  00000000  00003521  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003ef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea ec       	ldi	r30, 0xCA	; 202
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 31       	cpi	r26, 0x1A	; 26
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e1       	ldi	r26, 0x1A	; 26
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 80 01 	call	0x300	; 0x300 <main>
  92:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
	
	//Just a flag so it dose not blink as often.
	
		
	//Next loop if it is to fast with the blink.
	if(halftime)
  9a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  9e:	88 23       	and	r24, r24
  a0:	19 f0       	breq	.+6      	; 0xa8 <blink+0xe>
	{
		halftime = false;
  a2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		return;
  a6:	08 95       	ret
	}
		
	//Will start the blinking if 1 sec have passed. 20 * 50ms = 1s
	if(LCDDR3 != 0)
  a8:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
  ac:	88 23       	and	r24, r24
  ae:	19 f0       	breq	.+6      	; 0xb6 <blink+0x1c>
	{
		//Turn in off
		LCDDR3 = 0x0;
  b0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
  b4:	03 c0       	rjmp	.+6      	; 0xbc <blink+0x22>
	}
	else			
	{
		//Turn it on.
		LCDDR3 = 0x1;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__DATA_REGION_ORIGIN__+0x8f>
	}
	
	halftime = true;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  c2:	08 95       	ret

000000c4 <LCDInit>:


void LCDInit(void) {
	
	//Set Lowpower Waveform, no frame interrupt, no blanking. LCD Enable
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
  c4:	80 ec       	ldi	r24, 0xC0	; 192
  c6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	//drive time 300 microseconds, contrast control voltage 3.35 V.
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	//external asynchronous clock source, 1/3 bias, 1/4 duty cycle, 25 segments.
	LCDCRB = (1 << LCDCS) | (1<< LCDMUX0) | (1<< LCDMUX1) | (1 <<LCDPM0) | (1 <<LCDPM1) | (1 <<LCDPM2);
  d0:	87 eb       	ldi	r24, 0xB7	; 183
  d2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	//prescaler setting N=16, clock divider setting D=8
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
  dc:	08 95       	ret

000000de <writeChar>:



//Will write the Char on the screen as position pos.
void writeChar(char ch, int pos)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	64 97       	sbiw	r28, 0x14	; 20
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	//Nibbel the number that is sent to the LCD.
	uint8_t nibbleNumber = 0x0;
	
	
	//SCC Table with the numbers from 0 to 9.
	uint16_t sccTable[10] = {0x1551, 0x0110, 0x1e11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  f2:	94 e1       	ldi	r25, 0x14	; 20
  f4:	e5 e0       	ldi	r30, 0x05	; 5
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	de 01       	movw	r26, r28
  fa:	11 96       	adiw	r26, 0x01	; 1
  fc:	01 90       	ld	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	9a 95       	dec	r25
 102:	e1 f7       	brne	.-8      	; 0xfc <writeChar+0x1e>
	
	
	// Check if position is outside or not.
	if (pos < 0 || pos > 5) {
 104:	66 30       	cpi	r22, 0x06	; 6
 106:	71 05       	cpc	r23, r1
 108:	68 f5       	brcc	.+90     	; 0x164 <writeChar+0x86>
	
	// Check if it is a 0 to 9.
	if (ch >= '0' || ch <= '9')
	{
		//Get the number out of the array.
		number = sccTable[ch - '0'];
 10a:	e8 2f       	mov	r30, r24
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	f0 97       	sbiw	r30, 0x30	; 48
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	ec 0f       	add	r30, r28
 116:	fd 1f       	adc	r31, r29
 118:	21 81       	ldd	r18, Z+1	; 0x01
 11a:	32 81       	ldd	r19, Z+2	; 0x02
	
	
	
	
	//Point to the right position. Divide by 2 you can say.
	lcdaddr += pos >> 1;
 11c:	fb 01       	movw	r30, r22
 11e:	f5 95       	asr	r31
 120:	e7 95       	ror	r30
 122:	e4 51       	subi	r30, 0x14	; 20
 124:	ff 4f       	sbci	r31, 0xFF	; 255
	
	
	//Check if it is odd or even possition.
	if (pos % 2 == 0)
 126:	db 01       	movw	r26, r22
 128:	a1 70       	andi	r26, 0x01	; 1
 12a:	bb 27       	eor	r27, r27
 12c:	60 ff       	sbrs	r22, 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <writeChar+0x56>
	{
		mask = 0xf0;
	}
	else
	{
		mask = 0x0f;
 130:	6f e0       	ldi	r22, 0x0F	; 15
 132:	01 c0       	rjmp	.+2      	; 0x136 <writeChar+0x58>
	
	
	//Check if it is odd or even possition.
	if (pos % 2 == 0)
	{
		mask = 0xf0;
 134:	60 ef       	ldi	r22, 0xF0	; 240
 136:	af 01       	movw	r20, r30
 138:	4c 5e       	subi	r20, 0xEC	; 236
 13a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	//Will place out the nibbels on the right LCD address for the number.
	for (int i = 0; i < 4; i++ )
	{
		//Masking the smallest byte.
		nibbleNumber = number & 0xf;
 13c:	82 2f       	mov	r24, r18
 13e:	8f 70       	andi	r24, 0x0F	; 15
		number = number >> 4;
 140:	32 95       	swap	r19
 142:	22 95       	swap	r18
 144:	2f 70       	andi	r18, 0x0F	; 15
 146:	23 27       	eor	r18, r19
 148:	3f 70       	andi	r19, 0x0F	; 15
 14a:	23 27       	eor	r18, r19
		
		
		//Check position.
		if(pos % 2 != 0)
 14c:	10 97       	sbiw	r26, 0x00	; 0
 14e:	11 f0       	breq	.+4      	; 0x154 <writeChar+0x76>
		{
			//Shift the nibble to the right pos.
			nibbleNumber = nibbleNumber << 4;
 150:	82 95       	swap	r24
 152:	80 7f       	andi	r24, 0xF0	; 240
		}
		
		//Send the nibble.
		*lcdaddr = (*lcdaddr & mask) | nibbleNumber;
 154:	90 81       	ld	r25, Z
 156:	96 23       	and	r25, r22
 158:	89 2b       	or	r24, r25
 15a:	80 83       	st	Z, r24
		
		lcdaddr += 5;
 15c:	35 96       	adiw	r30, 0x05	; 5
		mask = 0x0f;
	}
	
	
	//Will place out the nibbels on the right LCD address for the number.
	for (int i = 0; i < 4; i++ )
 15e:	4e 17       	cp	r20, r30
 160:	5f 07       	cpc	r21, r31
 162:	61 f7       	brne	.-40     	; 0x13c <writeChar+0x5e>
		
		lcdaddr += 5;
		
	}
	
}
 164:	64 96       	adiw	r28, 0x14	; 20
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <is_prime>:

//Calculates the prime.
bool is_prime(long i)
{
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	6b 01       	movw	r12, r22
 184:	7c 01       	movw	r14, r24
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	c8 16       	cp	r12, r24
 18a:	d1 04       	cpc	r13, r1
 18c:	e1 04       	cpc	r14, r1
 18e:	f1 04       	cpc	r15, r1
 190:	74 f1       	brlt	.+92     	; 0x1ee <is_prime+0x78>
	{
		// Found number it can divide with.
		if(i % n == 0)
 192:	d7 01       	movw	r26, r14
 194:	c6 01       	movw	r24, r12
 196:	81 70       	andi	r24, 0x01	; 1
 198:	99 27       	eor	r25, r25
 19a:	aa 27       	eor	r26, r26
 19c:	b0 78       	andi	r27, 0x80	; 128
 19e:	bb 23       	and	r27, r27
 1a0:	54 f4       	brge	.+20     	; 0x1b6 <is_prime+0x40>
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	a1 09       	sbc	r26, r1
 1a6:	b1 09       	sbc	r27, r1
 1a8:	8e 6f       	ori	r24, 0xFE	; 254
 1aa:	9f 6f       	ori	r25, 0xFF	; 255
 1ac:	af 6f       	ori	r26, 0xFF	; 255
 1ae:	bf 6f       	ori	r27, 0xFF	; 255
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	a1 1d       	adc	r26, r1
 1b4:	b1 1d       	adc	r27, r1
 1b6:	89 2b       	or	r24, r25
 1b8:	8a 2b       	or	r24, r26
 1ba:	8b 2b       	or	r24, r27
 1bc:	d1 f0       	breq	.+52     	; 0x1f2 <is_prime+0x7c>
 1be:	c2 e0       	ldi	r28, 0x02	; 2
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
 1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <is_prime+0x5e>
 1c4:	c7 01       	movw	r24, r14
 1c6:	b6 01       	movw	r22, r12
 1c8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divmodsi4>
 1cc:	67 2b       	or	r22, r23
 1ce:	68 2b       	or	r22, r24
 1d0:	69 2b       	or	r22, r25
 1d2:	89 f0       	breq	.+34     	; 0x1f6 <is_prime+0x80>

//Calculates the prime.
bool is_prime(long i)
{
	//Loop all the numbers under i and try to divide it with them.
	for(int n = 2; n < i; n++)
 1d4:	21 96       	adiw	r28, 0x01	; 1
 1d6:	9e 01       	movw	r18, r28
 1d8:	0d 2e       	mov	r0, r29
 1da:	00 0c       	add	r0, r0
 1dc:	44 0b       	sbc	r20, r20
 1de:	55 0b       	sbc	r21, r21
 1e0:	2c 15       	cp	r18, r12
 1e2:	3d 05       	cpc	r19, r13
 1e4:	4e 05       	cpc	r20, r14
 1e6:	5f 05       	cpc	r21, r15
 1e8:	6c f3       	brlt	.-38     	; 0x1c4 <is_prime+0x4e>
		{
			return false;
		}
		
	}
	return true;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <is_prime+0x82>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <is_prime+0x82>
	for(int n = 2; n < i; n++)
	{
		// Found number it can divide with.
		if(i % n == 0)
		{
			return false;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <is_prime+0x82>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	return true;
	
}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	df 90       	pop	r13
 202:	cf 90       	pop	r12
 204:	08 95       	ret

00000206 <printAt>:



void printAt(long num, int pos) {
 206:	8f 92       	push	r8
 208:	9f 92       	push	r9
 20a:	af 92       	push	r10
 20c:	bf 92       	push	r11
 20e:	cf 92       	push	r12
 210:	df 92       	push	r13
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	4b 01       	movw	r8, r22
 21c:	5c 01       	movw	r10, r24
 21e:	ea 01       	movw	r28, r20
	
	
	pp = pos;
 220:	50 93 21 01 	sts	0x0121, r21	; 0x800121 <pp+0x1>
 224:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <pp>
	writeChar( (num % 100) / 10 + '0', pp);
 228:	24 e6       	ldi	r18, 0x64	; 100
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divmodsi4>
 234:	0f 2e       	mov	r0, r31
 236:	fa e0       	ldi	r31, 0x0A	; 10
 238:	cf 2e       	mov	r12, r31
 23a:	d1 2c       	mov	r13, r1
 23c:	e1 2c       	mov	r14, r1
 23e:	f1 2c       	mov	r15, r1
 240:	f0 2d       	mov	r31, r0
 242:	a7 01       	movw	r20, r14
 244:	96 01       	movw	r18, r12
 246:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divmodsi4>
 24a:	be 01       	movw	r22, r28
 24c:	80 e3       	ldi	r24, 0x30	; 48
 24e:	82 0f       	add	r24, r18
 250:	0e 94 6f 00 	call	0xde	; 0xde <writeChar>
	pp++;
 254:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <pp>
 258:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <pp+0x1>
 25c:	21 96       	adiw	r28, 0x01	; 1
 25e:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <pp+0x1>
 262:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <pp>
	writeChar( num % 10 + '0', pp);
 266:	c5 01       	movw	r24, r10
 268:	b4 01       	movw	r22, r8
 26a:	a7 01       	movw	r20, r14
 26c:	96 01       	movw	r18, r12
 26e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divmodsi4>
 272:	86 2f       	mov	r24, r22
 274:	be 01       	movw	r22, r28
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	0e 94 6f 00 	call	0xde	; 0xde <writeChar>
	
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	bf 90       	pop	r11
 28a:	af 90       	pop	r10
 28c:	9f 90       	pop	r9
 28e:	8f 90       	pop	r8
 290:	08 95       	ret

00000292 <button>:

//Activates lights on the LCD by using the joystick.
void button(int pos)
{

		printAt(counterButton, 4);
 292:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <__data_end>
 296:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <__data_end+0x1>
 29a:	07 2e       	mov	r0, r23
 29c:	00 0c       	add	r0, r0
 29e:	88 0b       	sbc	r24, r24
 2a0:	99 0b       	sbc	r25, r25
 2a2:	44 e0       	ldi	r20, 0x04	; 4
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	0e 94 03 01 	call	0x206	; 0x206 <printAt>
 2aa:	08 95       	ret

000002ac <computePrimes>:
	
	
}
//Counts the primes.
void computePrimes(int pos) {
 2ac:	ec 01       	movw	r28, r24
	long n;

	for(n = 1; ; n++) {
 2ae:	c1 2c       	mov	r12, r1
 2b0:	d1 2c       	mov	r13, r1
 2b2:	76 01       	movw	r14, r12
 2b4:	c3 94       	inc	r12
		if (is_prime(n)) {
 2b6:	c7 01       	movw	r24, r14
 2b8:	b6 01       	movw	r22, r12
 2ba:	0e 94 bb 00 	call	0x176	; 0x176 <is_prime>
 2be:	88 23       	and	r24, r24
 2c0:	29 f0       	breq	.+10     	; 0x2cc <computePrimes+0x20>
			printAt(n, pos);
 2c2:	ae 01       	movw	r20, r28
 2c4:	c7 01       	movw	r24, r14
 2c6:	b6 01       	movw	r22, r12
 2c8:	0e 94 03 01 	call	0x206	; 0x206 <printAt>
}
//Counts the primes.
void computePrimes(int pos) {
	long n;

	for(n = 1; ; n++) {
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	c8 1a       	sub	r12, r24
 2d0:	d8 0a       	sbc	r13, r24
 2d2:	e8 0a       	sbc	r14, r24
 2d4:	f8 0a       	sbc	r15, r24
		if (is_prime(n)) {
			printAt(n, pos);
		}
	}
 2d6:	ef cf       	rjmp	.-34     	; 0x2b6 <computePrimes+0xa>

000002d8 <timmerInit>:
void timmerInit(void)
{
		// The clock settings.
		
		//OC1A is set high on compare match.
		TCCR1A = (1 << COM1A0) | (1 << COM1A1);
 2d8:	80 ec       	ldi	r24, 0xC0	; 192
 2da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
		
		// Set timer to CTC and prescale Factor on 1024.
		TCCR1B = (1 << WGM12) | (1 << CS10) |(1 << CS12);
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		
		// Set Value to around 1s.
		OCR1A = 3906;
 2e4:	82 e4       	ldi	r24, 0x42	; 66
 2e6:	9f e0       	ldi	r25, 0x0F	; 15
 2e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 2ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		
		//clearing the TCNT1 register during initialization.
		TCNT1 = 0x0;
 2f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 2f4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		
		//Compare a match interrupt Enable.
		TIMSK1 = (1 << OCIE1A);
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 2fe:	08 95       	ret

00000300 <main>:


int main() {
	
	//Prescaler
	CLKPR = 0x80;
 300:	e1 e6       	ldi	r30, 0x61	; 97
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	80 83       	st	Z, r24
	CLKPR = 0x00;
 308:	10 82       	st	Z, r1
	
	//LCD Init
	LCDInit();
 30a:	0e 94 62 00 	call	0xc4	; 0xc4 <LCDInit>
	
	//Init the Timer.
	timmerInit();
 30e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <timmerInit>
	

	
	
	spawn(blink, 0);
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	8d e4       	ldi	r24, 0x4D	; 77
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 18 02 	call	0x430	; 0x430 <spawn>
	spawn(button, 3);
 31e:	63 e0       	ldi	r22, 0x03	; 3
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	89 e4       	ldi	r24, 0x49	; 73
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 18 02 	call	0x430	; 0x430 <spawn>
	computePrimes(0);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 56 01 	call	0x2ac	; 0x2ac <computePrimes>

00000332 <__vector_7>:
	
}


//Yield to blink if time is right.
ISR(TIMER1_COMPA_vect) {
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	spawn(blink, 0);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	8d e4       	ldi	r24, 0x4D	; 77
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 18 02 	call	0x430	; 0x430 <spawn>
	yield();
 360:	0e 94 c1 02 	call	0x582	; 0x582 <yield>
}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_3>:


//If button is pressed Yield to Button.
ISR(PCINT1_vect){
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	2f 93       	push	r18
 392:	3f 93       	push	r19
 394:	4f 93       	push	r20
 396:	5f 93       	push	r21
 398:	6f 93       	push	r22
 39a:	7f 93       	push	r23
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	//Read the pin.
	if((PINB >> 7) == 0) {
 3a8:	1f 99       	sbic	0x03, 7	; 3
 3aa:	11 c0       	rjmp	.+34     	; 0x3ce <__vector_3+0x48>
		
		//Need global counter or the mutex won't work.
		counterButton++;
 3ac:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
 3b0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 3ba:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		
		//Unlock and change.
		spawn(button, 4);
 3be:	64 e0       	ldi	r22, 0x04	; 4
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	89 e4       	ldi	r24, 0x49	; 73
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 18 02 	call	0x430	; 0x430 <spawn>
		yield();
 3ca:	0e 94 c1 02 	call	0x582	; 0x582 <yield>
	}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	00 d0       	rcall	.+0      	; 0x3f6 <dispatch+0x6>
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	9a 83       	std	Y+2, r25	; 0x02
 3fc:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 3fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <current>
 402:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <current+0x1>
 406:	06 96       	adiw	r24, 0x06	; 6
 408:	0e 94 22 03 	call	0x644	; 0x644 <setjmp>
 40c:	89 2b       	or	r24, r25
 40e:	59 f4       	brne	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
        current = next;
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	9a 81       	ldd	r25, Y+2	; 0x02
 414:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <current+0x1>
 418:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <current>
        longjmp(next->context,1);
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	06 96       	adiw	r24, 0x06	; 6
 422:	0e 94 42 03 	call	0x684	; 0x684 <longjmp>
    }
}
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <spawn>:

void spawn(void (* function)(int), int arg) {
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 d0       	rcall	.+0      	; 0x436 <spawn+0x6>
 436:	cd b7       	in	r28, 0x3d	; 61
 438:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 43a:	f8 94       	cli
    if (!initialized) initialize();
 43c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <initialized>
 440:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <initialized+0x1>
 444:	23 2b       	or	r18, r19
 446:	09 f5       	brne	.+66     	; 0x48a <spawn+0x5a>


static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 448:	2c ef       	ldi	r18, 0xFC	; 252
 44a:	31 e0       	ldi	r19, 0x01	; 1
 44c:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <threads+0x5>
 450:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <threads+0x4>
 454:	29 e6       	ldi	r18, 0x69	; 105
 456:	32 e0       	ldi	r19, 0x02	; 2
 458:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <threads+0x72>
 45c:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <threads+0x71>
 460:	26 ed       	ldi	r18, 0xD6	; 214
 462:	32 e0       	ldi	r19, 0x02	; 2
 464:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <threads+0xdf>
 468:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 46c:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 470:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>
	
	//Button settings.
	
	//Activate the button
	PORTB = 0x80;
 474:	20 e8       	ldi	r18, 0x80	; 128
 476:	25 b9       	out	0x05, r18	; 5
	
	//Enabel Interrupt Enabel 1 on the PCIE1
	EIMSK = (1 << PCIE1);
 478:	2d bb       	out	0x1d, r18	; 29
	PCMSK1 = (1 << PCINT15);
 47a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	
    initialized = 1;
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <initialized+0x1>
 486:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <initialized>
}



static thread dequeue(thread *queue) {
    thread p = *queue;
 48a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freeQ>
 48e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <freeQ+0x1>
 492:	3a 83       	std	Y+2, r19	; 0x02
 494:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 496:	23 2b       	or	r18, r19
 498:	a9 f0       	breq	.+42     	; 0x4c4 <spawn+0x94>
        *queue = (*queue)->next;
 49a:	e9 81       	ldd	r30, Y+1	; 0x01
 49c:	fa 81       	ldd	r31, Y+2	; 0x02
 49e:	44 81       	ldd	r20, Z+4	; 0x04
 4a0:	55 81       	ldd	r21, Z+5	; 0x05
 4a2:	50 93 04 01 	sts	0x0104, r21	; 0x800104 <freeQ+0x1>
 4a6:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 4aa:	91 83       	std	Z+1, r25	; 0x01
 4ac:	80 83       	st	Z, r24
    newp->arg = arg;
 4ae:	73 83       	std	Z+3, r23	; 0x03
 4b0:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 4b2:	15 82       	std	Z+5, r1	; 0x05
 4b4:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 4b6:	cf 01       	movw	r24, r30
 4b8:	06 96       	adiw	r24, 0x06	; 6
 4ba:	0e 94 22 03 	call	0x644	; 0x644 <setjmp>
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	c1 f5       	brne	.+112    	; 0x532 <__stack+0x33>
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <spawn+0x96>
 4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <spawn+0x94>
        ENABLE();
 4c6:	78 94       	sei
        current->function(current->arg);
 4c8:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <current>
 4cc:	b0 91 02 01 	lds	r27, 0x0102	; 0x800102 <current+0x1>
 4d0:	ed 91       	ld	r30, X+
 4d2:	fc 91       	ld	r31, X
 4d4:	11 97       	sbiw	r26, 0x01	; 1
 4d6:	12 96       	adiw	r26, 0x02	; 2
 4d8:	8d 91       	ld	r24, X+
 4da:	9c 91       	ld	r25, X
 4dc:	13 97       	sbiw	r26, 0x03	; 3
 4de:	09 95       	icall
        DISABLE();
 4e0:	f8 94       	cli
        enqueue(current, &freeQ);
 4e2:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <current>
 4e6:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <current+0x1>
	
	
}

static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 4ea:	15 82       	std	Z+5, r1	; 0x05
 4ec:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL)
 4ee:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <freeQ>
 4f2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <freeQ+0x1>
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	29 f4       	brne	.+10     	; 0x504 <__stack+0x5>
	{
		*queue = p;
 4fa:	f0 93 04 01 	sts	0x0104, r31	; 0x800104 <freeQ+0x1>
 4fe:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <freeQ>
 502:	06 c0       	rjmp	.+12     	; 0x510 <__stack+0x11>
	//Put it first in the queue.
	else
	{
		//save the old queue to next.
		thread oldQ = *queue;
		p->next = oldQ;
 504:	95 83       	std	Z+5, r25	; 0x05
 506:	84 83       	std	Z+4, r24	; 0x04
		
		//Put the new threads first.
		*queue = p;
 508:	f0 93 04 01 	sts	0x0104, r31	; 0x800104 <freeQ+0x1>
 50c:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <freeQ>
}



static thread dequeue(thread *queue) {
    thread p = *queue;
 510:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 514:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	51 f0       	breq	.+20     	; 0x530 <__stack+0x31>
        *queue = (*queue)->next;
 51c:	fc 01       	movw	r30, r24
 51e:	24 81       	ldd	r18, Z+4	; 0x04
 520:	35 81       	ldd	r19, Z+5	; 0x05
 522:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 526:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 52a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <dispatch>
 52e:	01 c0       	rjmp	.+2      	; 0x532 <__stack+0x33>
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stack+0x31>
    }
    SETSTACK(&newp->context, &newp->stack);
 532:	e9 81       	ldd	r30, Y+1	; 0x01
 534:	fa 81       	ldd	r31, Y+2	; 0x02
 536:	36 96       	adiw	r30, 0x06	; 6
 538:	89 81       	ldd	r24, Y+1	; 0x01
 53a:	9a 81       	ldd	r25, Y+2	; 0x02
 53c:	87 59       	subi	r24, 0x97	; 151
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	91 8b       	std	Z+17, r25	; 0x11
 542:	80 8b       	std	Z+16, r24	; 0x10
 544:	93 8b       	std	Z+19, r25	; 0x13
 546:	82 8b       	std	Z+18, r24	; 0x12
	
	
}

static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 548:	e9 81       	ldd	r30, Y+1	; 0x01
 54a:	fa 81       	ldd	r31, Y+2	; 0x02
 54c:	15 82       	std	Z+5, r1	; 0x05
 54e:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL)
 550:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 554:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
 558:	00 97       	sbiw	r24, 0x00	; 0
 55a:	29 f4       	brne	.+10     	; 0x566 <__stack+0x67>
	{
		*queue = p;
 55c:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <readyQ+0x1>
 560:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <readyQ>
 564:	08 c0       	rjmp	.+16     	; 0x576 <__stack+0x77>
	//Put it first in the queue.
	else
	{
		//save the old queue to next.
		thread oldQ = *queue;
		p->next = oldQ;
 566:	e9 81       	ldd	r30, Y+1	; 0x01
 568:	fa 81       	ldd	r31, Y+2	; 0x02
 56a:	95 83       	std	Z+5, r25	; 0x05
 56c:	84 83       	std	Z+4, r24	; 0x04
		
		//Put the new threads first.
		*queue = p;
 56e:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <readyQ+0x1>
 572:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 576:	78 94       	sei
}
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <yield>:

void yield(void)
{
	//See if it is ready.
	if(readyQ)
 582:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 586:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
 58a:	00 97       	sbiw	r24, 0x00	; 0
 58c:	c9 f0       	breq	.+50     	; 0x5c0 <yield+0x3e>


static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 58e:	fc 01       	movw	r30, r24
 590:	24 81       	ldd	r18, Z+4	; 0x04
 592:	35 81       	ldd	r19, Z+5	; 0x05
	//See if it is ready.
	if(readyQ)
	{
		//See to it that the Current is not runed but the new one insted.
		thread next = dequeue(&readyQ);
		enqueue(current, &readyQ);
 594:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <current>
 598:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <current+0x1>
	
	
}

static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 59c:	15 82       	std	Z+5, r1	; 0x05
 59e:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL)
 5a0:	21 15       	cp	r18, r1
 5a2:	31 05       	cpc	r19, r1
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <yield+0x2e>
	{
		*queue = p;
 5a6:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <readyQ+0x1>
 5aa:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <readyQ>
 5ae:	06 c0       	rjmp	.+12     	; 0x5bc <yield+0x3a>
	//Put it first in the queue.
	else
	{
		//save the old queue to next.
		thread oldQ = *queue;
		p->next = oldQ;
 5b0:	35 83       	std	Z+5, r19	; 0x05
 5b2:	24 83       	std	Z+4, r18	; 0x04
		
		//Put the new threads first.
		*queue = p;
 5b4:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <readyQ+0x1>
 5b8:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <readyQ>
	if(readyQ)
	{
		//See to it that the Current is not runed but the new one insted.
		thread next = dequeue(&readyQ);
		enqueue(current, &readyQ);
		dispatch(next);
 5bc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <dispatch>
 5c0:	08 95       	ret

000005c2 <__divmodsi4>:
 5c2:	05 2e       	mov	r0, r21
 5c4:	97 fb       	bst	r25, 7
 5c6:	1e f4       	brtc	.+6      	; 0x5ce <__divmodsi4+0xc>
 5c8:	00 94       	com	r0
 5ca:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <__negsi2>
 5ce:	57 fd       	sbrc	r21, 7
 5d0:	07 d0       	rcall	.+14     	; 0x5e0 <__divmodsi4_neg2>
 5d2:	0e 94 00 03 	call	0x600	; 0x600 <__udivmodsi4>
 5d6:	07 fc       	sbrc	r0, 7
 5d8:	03 d0       	rcall	.+6      	; 0x5e0 <__divmodsi4_neg2>
 5da:	4e f4       	brtc	.+18     	; 0x5ee <__divmodsi4_exit>
 5dc:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__negsi2>

000005e0 <__divmodsi4_neg2>:
 5e0:	50 95       	com	r21
 5e2:	40 95       	com	r20
 5e4:	30 95       	com	r19
 5e6:	21 95       	neg	r18
 5e8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ea:	4f 4f       	sbci	r20, 0xFF	; 255
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255

000005ee <__divmodsi4_exit>:
 5ee:	08 95       	ret

000005f0 <__negsi2>:
 5f0:	90 95       	com	r25
 5f2:	80 95       	com	r24
 5f4:	70 95       	com	r23
 5f6:	61 95       	neg	r22
 5f8:	7f 4f       	sbci	r23, 0xFF	; 255
 5fa:	8f 4f       	sbci	r24, 0xFF	; 255
 5fc:	9f 4f       	sbci	r25, 0xFF	; 255
 5fe:	08 95       	ret

00000600 <__udivmodsi4>:
 600:	a1 e2       	ldi	r26, 0x21	; 33
 602:	1a 2e       	mov	r1, r26
 604:	aa 1b       	sub	r26, r26
 606:	bb 1b       	sub	r27, r27
 608:	fd 01       	movw	r30, r26
 60a:	0d c0       	rjmp	.+26     	; 0x626 <__udivmodsi4_ep>

0000060c <__udivmodsi4_loop>:
 60c:	aa 1f       	adc	r26, r26
 60e:	bb 1f       	adc	r27, r27
 610:	ee 1f       	adc	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	a2 17       	cp	r26, r18
 616:	b3 07       	cpc	r27, r19
 618:	e4 07       	cpc	r30, r20
 61a:	f5 07       	cpc	r31, r21
 61c:	20 f0       	brcs	.+8      	; 0x626 <__udivmodsi4_ep>
 61e:	a2 1b       	sub	r26, r18
 620:	b3 0b       	sbc	r27, r19
 622:	e4 0b       	sbc	r30, r20
 624:	f5 0b       	sbc	r31, r21

00000626 <__udivmodsi4_ep>:
 626:	66 1f       	adc	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	88 1f       	adc	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	1a 94       	dec	r1
 630:	69 f7       	brne	.-38     	; 0x60c <__udivmodsi4_loop>
 632:	60 95       	com	r22
 634:	70 95       	com	r23
 636:	80 95       	com	r24
 638:	90 95       	com	r25
 63a:	9b 01       	movw	r18, r22
 63c:	ac 01       	movw	r20, r24
 63e:	bd 01       	movw	r22, r26
 640:	cf 01       	movw	r24, r30
 642:	08 95       	ret

00000644 <setjmp>:
 644:	dc 01       	movw	r26, r24
 646:	2d 92       	st	X+, r2
 648:	3d 92       	st	X+, r3
 64a:	4d 92       	st	X+, r4
 64c:	5d 92       	st	X+, r5
 64e:	6d 92       	st	X+, r6
 650:	7d 92       	st	X+, r7
 652:	8d 92       	st	X+, r8
 654:	9d 92       	st	X+, r9
 656:	ad 92       	st	X+, r10
 658:	bd 92       	st	X+, r11
 65a:	cd 92       	st	X+, r12
 65c:	dd 92       	st	X+, r13
 65e:	ed 92       	st	X+, r14
 660:	fd 92       	st	X+, r15
 662:	0d 93       	st	X+, r16
 664:	1d 93       	st	X+, r17
 666:	cd 93       	st	X+, r28
 668:	dd 93       	st	X+, r29
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	8d b7       	in	r24, 0x3d	; 61
 670:	8d 93       	st	X+, r24
 672:	8e b7       	in	r24, 0x3e	; 62
 674:	8d 93       	st	X+, r24
 676:	8f b7       	in	r24, 0x3f	; 63
 678:	8d 93       	st	X+, r24
 67a:	ed 93       	st	X+, r30
 67c:	fd 93       	st	X+, r31
 67e:	88 27       	eor	r24, r24
 680:	99 27       	eor	r25, r25
 682:	09 94       	ijmp

00000684 <longjmp>:
 684:	dc 01       	movw	r26, r24
 686:	cb 01       	movw	r24, r22
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	91 05       	cpc	r25, r1
 68c:	81 1d       	adc	r24, r1
 68e:	2d 90       	ld	r2, X+
 690:	3d 90       	ld	r3, X+
 692:	4d 90       	ld	r4, X+
 694:	5d 90       	ld	r5, X+
 696:	6d 90       	ld	r6, X+
 698:	7d 90       	ld	r7, X+
 69a:	8d 90       	ld	r8, X+
 69c:	9d 90       	ld	r9, X+
 69e:	ad 90       	ld	r10, X+
 6a0:	bd 90       	ld	r11, X+
 6a2:	cd 90       	ld	r12, X+
 6a4:	dd 90       	ld	r13, X+
 6a6:	ed 90       	ld	r14, X+
 6a8:	fd 90       	ld	r15, X+
 6aa:	0d 91       	ld	r16, X+
 6ac:	1d 91       	ld	r17, X+
 6ae:	cd 91       	ld	r28, X+
 6b0:	dd 91       	ld	r29, X+
 6b2:	ed 91       	ld	r30, X+
 6b4:	fd 91       	ld	r31, X+
 6b6:	0d 90       	ld	r0, X+
 6b8:	f8 94       	cli
 6ba:	fe bf       	out	0x3e, r31	; 62
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	ed bf       	out	0x3d, r30	; 61
 6c0:	ed 91       	ld	r30, X+
 6c2:	fd 91       	ld	r31, X+
 6c4:	09 94       	ijmp

000006c6 <_exit>:
 6c6:	f8 94       	cli

000006c8 <__stop_program>:
 6c8:	ff cf       	rjmp	.-2      	; 0x6c8 <__stop_program>
